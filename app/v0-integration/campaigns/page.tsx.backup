"use client";

import React, { useState } from "react";
import { motion, AnimatePresence } from "framer-motion";
import { 
  Target, 
  Mail, 
  Users, 
  TrendingUp, 
  Calendar, 
  MoreVertical,
  Play,
  Pause,
  Edit,
  Copy,
  Trash2,
  Plus,
  Filter,
  Search,
  BarChart3,
  Eye,
  MousePointer,
  MessageSquare,
  DollarSign,
  Clock,
  CheckCircle,
  AlertCircle,
  Zap
} from "lucide-react";

// Enhanced mock data for campaigns
const mockCampaigns = [
  {
    id: 1,
    name: "Summer Sale 2024",
    description: "Promote summer collection with 30% discount",
    type: "email",
    status: "active",
    startDate: "2024-06-01",
    endDate: "2024-08-31",
    budget: 5000,
    spent: 3200,
    recipients: 25000,
    openRate: 24.5,
    clickRate: 8.7,
    conversionRate: 3.2,
    revenue: 15600,
    sequences: [
      { id: 1, name: "Welcome Series", status: "active", openRate: 28.3 },
      { id: 2, name: "Abandoned Cart", status: "active", openRate: 22.1 },
      { id: 3, name: "Follow-up", status: "draft", openRate: 0 }
    ],
    abTests: [
      { id: 1, name: "Subject Line A/B", status: "running", winner: "A", improvement: 12.5 },
      { id: 2, name: "CTA Button Test", status: "completed", winner: "B", improvement: 8.3 }
    ]
  },
  {
    id: 2,
    name: "Product Launch",
    description: "Announce new product line",
    type: "social",
    status: "draft",
    startDate: "2024-07-15",
    endDate: "2024-07-30",
    budget: 10000,
    spent: 0,
    recipients: 0,
    openRate: 0,
    clickRate: 0,
    conversionRate: 0,
    revenue: 0,
    sequences: [],
    abTests: []
  },
  {
    id: 3,
    name: "Holiday Special",
    description: "Special deals for the holiday season",
    type: "multi",
    status: "paused",
    startDate: "2024-12-01",
    endDate: "2024-12-31",
    budget: 8000,
    spent: 4123,
    recipients: 32100,
    openRate: 5.9,
    clickRate: 1.9,
    conversionRate: 623,
    revenue: 18600,
    sequences: [],
    abTests: []
  }
];

function CampaignCard({ campaign }: any) {
  const getStatusColor = (status: string) => {
    switch (status) {
      case "active": return "bg-green-500";
      case "draft": return "bg-gray-500";
      case "paused": return "bg-yellow-500";
      default: return "bg-gray-500";
    }
  };

  const getStatusText = (status: string) => {
    switch (status) {
      case "active": return "Active";
      case "draft": return "Draft";
      case "paused": return "Paused";
      default: return "Unknown";
    }
  };

  return (
    <motion.div
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      whileHover={{ y: -4, scale: 1.02 }}
      className="glass-strong p-6 rounded-lg border transition-all duration-300"
    >
      <div className="flex items-center justify-between mb-4">
        <div className="flex items-center space-x-3">
          <div className={`p-2 rounded-lg bg-white/5 ${getStatusColor(campaign.status)}`}>
            <Target className="w-5 h-5" />
          </div>
          <div>
            <h3 className="font-semibold text-white text-lg">{campaign.name}</h3>
            <p className="text-sm text-gray-400">{campaign.description}</p>
          </div>
        </div>
        <div className="flex items-center space-x-2">
          <div className={`w-3 h-3 rounded-full ${getStatusColor(campaign.status)}`} />
          <span className="text-sm text-gray-400">{getStatusText(campaign.status)}</span>
        </div>
      </div>

      <div className="space-y-3">
        <div className="flex justify-between items-center">
          <span className="text-sm text-gray-400">Start Date</span>
          <span className="text-sm font-medium text-white">{campaign.startDate}</span>
        </div>
        <div className="flex justify-between items-center">
          <span className="text-sm text-gray-400">End Date</span>
          <span className="text-sm font-medium text-white">{campaign.endDate}</span>
        </div>
        <div className="flex justify-between items-center">
          <span className="text-sm text-gray-400">Budget</span>
          <span className="text-sm font-medium text-white">{campaign.budget}</span>
        </div>
        <div className="flex justify-between items-center">
          <span className="text-sm text-gray-400">Spent</span>
          <span className="text-sm font-medium text-white">{campaign.spent}</span>
        </div>
        <div className="flex justify-between items-center">
          <span className="text-sm text-gray-400">Recipients</span>
          <span className="text-sm font-medium text-white">{campaign.recipients}</span>
        </div>
        <div className="flex justify-between items-center">
          <span className="text-sm text-gray-400">Open Rate</span>
          <span className="text-sm font-medium text-white">{campaign.openRate}%</span>
        </div>
        <div className="flex justify-between items-center">
          <span className="text-sm text-gray-400">Click Rate</span>
          <span className="text-sm font-medium text-white">{campaign.clickRate}%</span>
        </div>
        <div className="flex justify-between items-center">
          <span className="text-sm text-gray-400">Conversion Rate</span>
          <span className="text-sm font-medium text-white">{campaign.conversionRate}%</span>
        </div>
        <div className="flex justify-between items-center">
          <span className="text-sm text-gray-400">Revenue</span>
          <span className="text-sm font-medium text-white">{campaign.revenue}</span>
        </div>
      </div>

      <div className="flex space-x-2 mt-4">
        {campaign.status === "active" ? (
          <motion.button
            whileHover={{ scale: 1.05 }}
            whileTap={{ scale: 0.95 }}
            className="btn-neon flex-1"
          >
            <Pause className="h-4 w-4 mr-2" />
            Pause
          </motion.button>
        ) : (
          <motion.button
            whileHover={{ scale: 1.05 }}
            whileTap={{ scale: 0.95 }}
            className="btn-neon flex-1"
          >
            <Play className="h-4 w-4 mr-2" />
            Start
          </motion.button>
        )}
      </div>
    </motion.div>
  );
}

function AbTestCard({ test }: any) {
  return (
    <motion.div
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      whileHover={{ y: -4, scale: 1.02 }}
      className="glass-strong p-6 rounded-lg border transition-all duration-300"
    >
      <div className="flex items-center justify-between mb-4">
        <div className="flex items-center space-x-3">
          <div className={`p-2 rounded-lg bg-white/5 ${test.status === "running" ? "bg-neon-blue" : "bg-gray-500"}`}>
            <BarChart3 className="w-5 h-5" />
          </div>
          <div>
            <h3 className="font-semibold text-white text-lg">{test.name}</h3>
            <p className="text-sm text-gray-400">{test.status === "running" ? "Running" : "Completed"}</p>
          </div>
        </div>
        <div className="flex items-center space-x-2">
          <div className={`w-3 h-3 rounded-full ${test.status === "running" ? "bg-neon-blue" : "bg-gray-500"}`} />
          <span className="text-sm text-gray-400">{test.status === "running" ? "Running" : "Completed"}</span>
        </div>
      </div>

      <div className="space-y-3">
        <div className="flex justify-between items-center">
          <span className="text-sm text-gray-400">Winner</span>
          <span className="text-sm font-medium text-white">{test.winner}</span>
        </div>
        <div className="flex justify-between items-center">
          <span className="text-sm text-gray-400">Improvement</span>
          <span className="text-sm font-medium text-white">{test.improvement}%</span>
        </div>
      </div>
    </motion.div>
  );
}

export default function CampaignsPage() {
  const [campaigns, setCampaigns] = useState(mockCampaigns);

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-3xl font-bold tracking-tight">Campaigns</h1>
          <p className="text-muted-foreground">
            Manage your marketing campaigns and track performance.
          </p>
        </div>
        <motion.button
          whileHover={{ scale: 1.05 }}
          whileTap={{ scale: 0.95 }}
          className="btn-neon flex items-center space-x-2"
        >
          <Plus className="h-4 w-4" />
          <span>New Campaign</span>
        </motion.button>
      </div>

      <div className="grid gap-6 md:grid-cols-2 lg:grid-cols-3">
        {campaigns.map((campaign) => (
          <motion.div
            key={campaign.id}
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ delay: 0.1 * campaign.id }}
          >
            <CampaignCard campaign={campaign} />
          </motion.div>
        ))}
      </div>

      <div className="grid gap-6 md:grid-cols-2 lg:grid-cols-3">
        {campaigns.map((campaign) => (
          <motion.div
            key={`${campaign.id}-ab-tests`}
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ delay: 0.1 * campaign.id + 0.5 }}
          >
            <AbTestCard test={campaign.abTests[0]} />
          </motion.div>
        ))}
      </div>
    </div>
  );
} 