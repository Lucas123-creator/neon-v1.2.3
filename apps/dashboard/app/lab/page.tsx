"use client";

import { useState } from "react";
import {
  Lightbulb,
  Plus,
  Palette,
  Users,
  TrendingUp,
  ThumbsUp,
  ThumbsDown,
  Eye,
  Sparkles,
  Filter,
  Grid3X3,
  List,
  Zap,
} from "lucide-react";
import { Card, CardContent, CardHeader, CardTitle, Button } from "@neon/ui";
import { api } from "../providers/trpc-provider";
import { SignIdeaForm } from "../components/lab/SignIdeaForm";
import { AIPrototypePreview } from "../components/lab/AIPrototypePreview";
import { VotingPanel } from "../components/lab/VotingPanel";

export default function LabPage() {
  const [viewMode, setViewMode] = useState<"grid" | "list">("grid");
  const [selectedCategory, setSelectedCategory] = useState<string>("all");
  const [sortBy, setSortBy] = useState<"newest" | "popular" | "priority">(
    "popular",
  );
  const [showIdeaForm, setShowIdeaForm] = useState(false);
  const [selectedIdea, setSelectedIdea] = useState<string | null>(null);

  // Data fetching
  const { data: ideasData, refetch: refetchIdeas } = api.lab.getIdeas.useQuery({
    category: selectedCategory === "all" ? undefined : selectedCategory,
    sortBy,
    limit: 20,
  });

  const { data: topIdeas } = api.lab.getTopIdeas.useQuery({
    timeRange: "month",
    limit: 6,
    category: selectedCategory === "all" ? undefined : selectedCategory,
  });

  const { data: labStats } = api.lab.getLabStats.useQuery();

  const categories = [
    "all",
    "neon-signs",
    "led-displays",
    "custom",
    "interactive",
    "outdoor",
    "indoor",
  ];

  const handleIdeaSubmit = () => {
    setShowIdeaForm(false);
    refetchIdeas();
  };

  const handleVote = async (
    ideaId: string,
    voteType: "upvote" | "downvote",
  ) => {
    // In a real app, you'd get the actual user ID
    const userId = `user_${Date.now()}`;

    try {
      await api.lab.voteOnIdea.mutate({
        ideaId,
        userId,
        voteType,
      });
      refetchIdeas();
    } catch (error) {
      console.error("Failed to vote:", error);
    }
  };

  return (
    <div className="space-y-8">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div className="space-y-2">
          <h1 className="text-3xl font-bold bg-gradient-to-r from-purple-600 via-pink-600 to-orange-600 bg-clip-text text-transparent">
            AI-Powered Product Innovation Lab
          </h1>
          <p className="text-muted-foreground">
            Submit ideas, generate AI mockups, and let the community vote on the
            next big thing
          </p>
        </div>
        <Button
          onClick={() => setShowIdeaForm(true)}
          className="flex items-center gap-2 bg-gradient-to-r from-purple-500 to-pink-500 hover:from-purple-600 hover:to-pink-600"
        >
          <Plus className="h-4 w-4" />
          Submit Idea
        </Button>
      </div>

      {/* Lab Statistics */}
      <div className="grid grid-cols-2 md:grid-cols-4 gap-6">
        <Card className="border-l-4 border-l-purple-500">
          <CardHeader className="flex flex-row items-center justify-between pb-2">
            <CardTitle className="text-sm font-medium">Total Ideas</CardTitle>
            <Lightbulb className="h-4 w-4 text-purple-500" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold text-purple-600">
              {labStats?.totalIdeas || 0}
            </div>
            <p className="text-xs text-muted-foreground">
              +{labStats?.recentIdeas || 0} this week
            </p>
          </CardContent>
        </Card>

        <Card className="border-l-4 border-l-blue-500">
          <CardHeader className="flex flex-row items-center justify-between pb-2">
            <CardTitle className="text-sm font-medium">
              Community Votes
            </CardTitle>
            <Users className="h-4 w-4 text-blue-500" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold text-blue-600">
              {labStats?.totalVotes || 0}
            </div>
            <p className="text-xs text-muted-foreground">Active engagement</p>
          </CardContent>
        </Card>

        <Card className="border-l-4 border-l-green-500">
          <CardHeader className="flex flex-row items-center justify-between pb-2">
            <CardTitle className="text-sm font-medium">AI Mockups</CardTitle>
            <Palette className="h-4 w-4 text-green-500" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold text-green-600">
              {labStats?.totalMockups || 0}
            </div>
            <p className="text-xs text-muted-foreground">Generated by AI</p>
          </CardContent>
        </Card>

        <Card className="border-l-4 border-l-orange-500">
          <CardHeader className="flex flex-row items-center justify-between pb-2">
            <CardTitle className="text-sm font-medium">
              Innovation Score
            </CardTitle>
            <TrendingUp className="h-4 w-4 text-orange-500" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold text-orange-600">
              {topIdeas?.[0]?.finalScore?.toFixed(0) || "0"}
            </div>
            <p className="text-xs text-muted-foreground">Top-rated idea</p>
          </CardContent>
        </Card>
      </div>

      {/* Top Ideas Showcase */}
      {topIdeas && topIdeas.length > 0 && (
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Sparkles className="h-5 w-5 text-purple-500" />
              Featured Ideas This Month
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
              {topIdeas.slice(0, 3).map((idea: any) => (
                <div
                  key={idea.id}
                  className="p-4 border rounded-lg hover:shadow-lg transition-shadow cursor-pointer bg-gradient-to-br from-purple-50 to-pink-50"
                  onClick={() => setSelectedIdea(idea.id)}
                >
                  <div className="flex items-start justify-between mb-2">
                    <div className="flex-1">
                      <h3 className="font-semibold text-lg">{idea.title}</h3>
                      <p className="text-sm text-muted-foreground mb-2">
                        {idea.description.substring(0, 100)}...
                      </p>
                    </div>
                    <div className="text-right">
                      <div className="text-2xl font-bold text-purple-600">
                        {idea.finalScore}
                      </div>
                      <div className="text-xs text-purple-500">Score</div>
                    </div>
                  </div>

                  <div className="flex items-center gap-4 text-sm">
                    <div className="flex items-center gap-1">
                      <ThumbsUp className="h-4 w-4 text-green-500" />
                      <span>{idea.upvotes}</span>
                    </div>
                    <div className="flex items-center gap-1">
                      <Eye className="h-4 w-4 text-blue-500" />
                      <span>{idea._count?.mockups || 0} mockups</span>
                    </div>
                    <div className="flex items-center gap-1">
                      <span className="px-2 py-1 bg-purple-100 text-purple-700 rounded text-xs">
                        {idea.category}
                      </span>
                    </div>
                  </div>

                  <div className="mt-3 w-full bg-gray-200 rounded-full h-2">
                    <div
                      className="bg-gradient-to-r from-purple-500 to-pink-500 rounded-full h-2"
                      style={{
                        width: `${Math.min(100, idea.popularityRatio)}%`,
                      }}
                    />
                  </div>
                </div>
              ))}
            </div>
          </CardContent>
        </Card>
      )}

      {/* Controls */}
      <div className="flex flex-col sm:flex-row gap-4 items-start sm:items-center justify-between p-4 bg-muted/30 rounded-lg">
        <div className="flex items-center gap-4 flex-wrap">
          <div className="flex items-center gap-2">
            <Filter className="h-4 w-4 text-muted-foreground" />
            <span className="text-sm font-medium">Category:</span>
            <select
              value={selectedCategory}
              onChange={(e) => setSelectedCategory(e.target.value)}
              className="h-8 rounded-md border border-input bg-background px-2 text-sm"
            >
              {categories.map((category) => (
                <option key={category} value={category}>
                  {category === "all"
                    ? "All Categories"
                    : category.replace("-", " ")}
                </option>
              ))}
            </select>
          </div>

          <div className="flex items-center gap-2">
            <span className="text-sm font-medium">Sort:</span>
            <select
              value={sortBy}
              onChange={(e) => setSortBy(e.target.value as any)}
              className="h-8 rounded-md border border-input bg-background px-2 text-sm"
            >
              <option value="popular">Most Popular</option>
              <option value="newest">Newest</option>
              <option value="priority">Priority</option>
            </select>
          </div>
        </div>

        <div className="flex items-center gap-2">
          <Button
            variant={viewMode === "grid" ? "default" : "outline"}
            size="sm"
            onClick={() => setViewMode("grid")}
          >
            <Grid3X3 className="h-4 w-4" />
          </Button>
          <Button
            variant={viewMode === "list" ? "default" : "outline"}
            size="sm"
            onClick={() => setViewMode("list")}
          >
            <List className="h-4 w-4" />
          </Button>
        </div>
      </div>

      {/* Ideas Grid/List */}
      <div
        className={`${
          viewMode === "grid"
            ? "grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6"
            : "space-y-4"
        }`}
      >
        {ideasData?.ideas.length === 0 ? (
          <div className="col-span-full text-center py-12 text-muted-foreground">
            <Lightbulb className="h-16 w-16 mx-auto mb-4 opacity-50" />
            <h3 className="text-lg font-medium mb-2">No ideas yet</h3>
            <p className="mb-4">
              Be the first to submit an innovative sign idea!
            </p>
            <Button onClick={() => setShowIdeaForm(true)}>
              <Plus className="h-4 w-4 mr-2" />
              Submit First Idea
            </Button>
          </div>
        ) : (
          ideasData?.ideas.map((idea: any) => (
            <Card
              key={idea.id}
              className={`hover:shadow-lg transition-all cursor-pointer ${
                selectedIdea === idea.id ? "ring-2 ring-purple-500" : ""
              } ${viewMode === "list" ? "flex-1" : ""}`}
              onClick={() =>
                setSelectedIdea(selectedIdea === idea.id ? null : idea.id)
              }
            >
              <CardHeader className={viewMode === "list" ? "pb-2" : ""}>
                <div className="flex items-start justify-between">
                  <div className="flex-1">
                    <CardTitle className="text-lg">{idea.title}</CardTitle>
                    <p className="text-sm text-muted-foreground mt-1">
                      {viewMode === "grid"
                        ? idea.description.substring(0, 80) + "..."
                        : idea.description.substring(0, 150) + "..."}
                    </p>
                  </div>
                  {idea.voteScore >= 10 && (
                    <div className="flex items-center gap-1 px-2 py-1 bg-orange-100 text-orange-700 rounded-full text-xs">
                      <Zap className="h-3 w-3" />
                      <span>Hot</span>
                    </div>
                  )}
                </div>
              </CardHeader>

              <CardContent>
                <div className="flex items-center justify-between mb-3">
                  <span className="px-2 py-1 bg-blue-100 text-blue-700 rounded text-xs">
                    {idea.category.replace("-", " ")}
                  </span>
                  <div className="text-sm text-muted-foreground">
                    Score: {idea.voteScore}
                  </div>
                </div>

                <VotingPanel
                  ideaId={idea.id}
                  upvotes={idea.upvotes}
                  downvotes={idea.downvotes}
                  onVote={handleVote}
                />

                {/* Show mockups if available */}
                {idea.mockups && idea.mockups.length > 0 && (
                  <div className="mt-3 pt-3 border-t">
                    <div className="flex items-center gap-2 text-sm text-muted-foreground">
                      <Palette className="h-4 w-4" />
                      <span>
                        {idea.mockups.length} AI mockup
                        {idea.mockups.length !== 1 ? "s" : ""}
                      </span>
                    </div>
                  </div>
                )}

                {/* Expanded view for selected idea */}
                {selectedIdea === idea.id && (
                  <div className="mt-4 pt-4 border-t space-y-4">
                    <div className="text-sm">
                      <strong>Full Description:</strong>
                      <p className="mt-1 text-muted-foreground">
                        {idea.description}
                      </p>
                    </div>

                    <AIPrototypePreview
                      ideaId={idea.id}
                      ideaTitle={idea.title}
                      category={idea.category}
                      mockups={idea.mockups || []}
                    />
                  </div>
                )}
              </CardContent>
            </Card>
          ))
        )}
      </div>

      {/* Load More */}
      {ideasData?.hasMore && (
        <div className="text-center">
          <Button variant="outline">Load More Ideas</Button>
        </div>
      )}

      {/* Idea Submission Modal */}
      {showIdeaForm && (
        <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4">
          <div className="bg-white rounded-lg max-w-2xl w-full max-h-[90vh] overflow-y-auto">
            <SignIdeaForm
              onSubmit={handleIdeaSubmit}
              onCancel={() => setShowIdeaForm(false)}
            />
          </div>
        </div>
      )}
    </div>
  );
}
